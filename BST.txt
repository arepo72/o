#include <stdio.h>
#include <malloc.h>
 
struct Tree{
   int data;
   struct Tree *right;
   struct Tree *left;
};
 
struct Tree* new_tree(int x)
{
   struct Tree *p;
   p = malloc(sizeof(struct Tree));
   p->data = x;
   p->left = NULL;
   p->right = NULL;
   return p;
}
 
struct Tree* Insertion(struct Tree *T, int x)
{
   if(T==NULL)
       return new_tree(x);
   else if(x>T->data)
       T->right = Insertion(T->right, x);
   else
       T->left = Insertion(T->left,x);
   return T;
}
 
int search(struct Tree *T,int x){
   if(T==NULL){
       printf("Empty tree");
       return 0;
   }
   else if(x<T->data){
       search(T->left,x);
   }
   else if(x>T->data){
       search(T->right,x);
   }
   else if(x==T->data){
       return 1;
   }
   else
   {
       return 0;
   }
}
 
struct Tree* FindMIN(struct Tree *root)
{
   if(root == NULL)
       return NULL;
   else if(root->left != NULL)
       return FindMIN(root->left);
   return root;
}
 
void findmax(struct Tree *T){
   if(T==NULL){
       printf("\nEmpty Tree");
   }
   else if(T->right==NULL)
   {
   printf("%d\n",T->data);
   }
   else{
       findmax(T->right);
   }
}
int findmin(struct Tree *T){
   if(T==NULL){
       printf("\nEmpty Tree");}
   else if(T->left==NULL){
       printf("%d\n",T->data);}
   else{
       findmin(T->left);
   }
}
 
struct Tree* delete(struct Tree *root, int x)
{
   if(root==NULL){
       printf("Empty");
       return NULL;}
   if (x>root->data)
       root->right = delete(root->right, x);
   else if(x<root->data)
       root->left = delete(root->left, x);
   else
   {
       if(root->left==NULL && root->right==NULL)
       {
           free(root);
           return NULL;
       }
       else if(root->left==NULL || root->right==NULL)
       {
           struct Tree *temp;
           if(root->left==NULL)
               temp = root->right;
           else
               temp = root->left;
           free(root);
           return temp;
       }
       else
       {
           struct Tree *temp = FindMIN(root->right);
           root->data = temp->data;
           root->right = delete(root->right, temp->data);
       }
   }
   return root;
}
 
void inorder(struct Tree *Tree)
{
   if(Tree!=NULL)
   {
       inorder(Tree->left);
       printf(" %d ", Tree->data);
       inorder(Tree->right);
   }
}
void preorder(struct Tree *Tree)
{
   if(Tree!=NULL)
   {
       printf(" %d ", Tree->data);
       preorder(Tree->left);
       preorder(Tree->right);
   }
}
void postorder(struct Tree *Tree)
{
   if(Tree!=NULL)
   {
       postorder(Tree->left);
       postorder(Tree->right);
       printf(" %d ", Tree->data);
   }
}
 
int main()
{
   struct Tree *Tree;
   int del;
   int ser;
   int choice;
   int esc;
   do{
   printf(" \n Enter choice:\n 0. To Insert \n 1. For Search \n 2. For Delete \n 3. Findmax \n 4. Findmin \n 5.To exit \n ");
   scanf("%d",&choice);
   if(choice==0){
       int i,n,data;
       printf(" Enter no of elements in the tree\n ");
       scanf("%d",&n);
       printf(" Enter elements:\n ");
       scanf("%d ",&data);
       Tree = new_tree(data);
       for(i=0;i<n-1;i++)
       {
           scanf("%d",&data);
           Insertion(Tree,data);
       }
       inorder(Tree);
   }
   if(choice==1){
   printf("\nEnter element to search : ");
   scanf("%d",&ser);
       if(search(Tree,ser)==1)
           printf("Found");
       else
           printf("Not found");
   }
   else if (choice==2){
       printf("\nEnter element to delete : ");
       scanf("%d",&del);
       if(search(Tree,del)==1){
           Tree = delete(Tree, del);
           inorder(Tree);
       }
       else{
           printf("\nElement not found");
       }
   }
   else if (choice==3){
   printf("\nMAX: ");
   findmax(Tree);
   }
   else if (choice==4){
   printf("\nMIN: ");
   findmin(Tree);
   }
   else if(choice==5){
       esc=choice;
   }
   }
   while(esc!=5);
   return 0;
}
