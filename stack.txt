 /*
   * Program :Stack data structure using array
   * Language : C
   */

  #include<stdio.h>

  #define size 5

  int arr[size];
  int top = -1;         //-1 indicates empty stack

  int isStackFull()
  {
      if(top == size - 1)
          return 1;
      return 0;
  }

  void push(int val)
  {
      //check if the stack is full
      if(isStackFull())
          printf("Unable to push %d as the Stack Is Full\n",val);
      else
      {
          //increment top by 1 
          ++top;
          //push the element into stack 
          arr[top]=val;
      }

  }

  int isStackEmpty()
  {
      if(top == -1)
          return 1;
      return 0;
  }

  void pop()
  {
      //check if the stack is empty
      if(isStackEmpty())
          printf("Stack Is Empty\n");
      else
      {
          //print the popped element
          printf("Popped element = %d\n",arr[top]);
          //decrement top by 1
          top--;
      }

  }

  int main()
  {
       push(10);
       push(13);
       push(5);
       push(26);
       push(100);
       push(78);       //we can't push 78 as the stack is full
       pop();          //100
       pop();          //26
       pop();          //5
       pop();          //13
       pop();          //10
       pop();          //unable to pop as the stack is empty
       return 0;
  }
  
/*
Stack using linked list
*/
//https://www.log2base2.com/data-structures/stack/stack-using-linked-list.html
#include<stdio.h>
#include<stdlib.h>
 
struct node
{
   int data;
   struct node *next;
};
 
struct node *front = NULL;
 
void push(int item)
{
   struct node *new = malloc(sizeof(struct node));
   new->data = item;
 
   new->next = front;
 
   front = new;
}
 
void pop()
{
 
   if(front == NULL)
       printf("Stack is Empty\n");
   else
   {
       //making the front point to the next node
       front = front->next;
   }
}
 
void display()
{
   struct node *temp = front;
   while(temp != NULL)
   {
        printf("%d ", temp->data);
        temp = temp->next;
   }
   printf("\n");
}
 
int main()
{
   printf("Pop/Push operations from the front of the list\n");
   push(5);
   push(4);
   push(3);
   push(2);
   push(1);
   printf("Initially \nList: ");
   display();
   printf("\n");
   pop();
   printf("Popping\nList: ");
   display();
   printf("\n");
   push(1);
   printf("Pushing 1 back\nList: ");
   display();
   printf("\n");
}

//expression evalution using stack
#include <stdio.h>
char s[50];
int top=-1;
int size=50; //sizeof(s[])/sizeof(*s);
void push(char x){
   if(top==size-1){
       printf("Overflow");
   }
   else{
       top++;
       s[top]=x;
   }
}
char pop(){
   if(top==-1)
       return -1;
  
   else
       return s[top--];
  
}
int priority(char x){
   if(x=='(')
       return 0;
  
    if(x=='+'||x=='-')
       return 1;
  
    if(x=='*'||x=='/')
       return 2;
   return 0;
  
}
int main(){
   char exp[50];
   char *e,x;
   printf("Enter infix:");
   scanf("%s",exp);
   e=exp;
   while(*e!='\0'){
       if(isalnum(*e))
           printf("%c",*e);
      
       else if(*e=='(')
           push(*e);
      
       else if(*e==')'){
           while((x=pop())!='(')
               printf("%c",x);
          
       }
       else{
           while(priority(s[top])>=priority(*e))
               printf("%c",pop());
               push(*e);
       }
           e++;
   }
   while(top!=-1){
       printf("%c",pop());
   }
   return 0;
  
}

